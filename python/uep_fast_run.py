# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_uep_fast_run')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_uep_fast_run')
    _uep_fast_run = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_uep_fast_run', [dirname(__file__)])
        except ImportError:
            import _uep_fast_run
            return _uep_fast_run
        if fp is not None:
            try:
                _mod = imp.load_module('_uep_fast_run', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _uep_fast_run = swig_import_helper()
    del swig_import_helper
else:
    import _uep_fast_run
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _uep_fast_run.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _uep_fast_run.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _uep_fast_run.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _uep_fast_run.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _uep_fast_run.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _uep_fast_run.SwigPyIterator_equal(self, x)

    def copy(self):
        return _uep_fast_run.SwigPyIterator_copy(self)

    def next(self):
        return _uep_fast_run.SwigPyIterator_next(self)

    def __next__(self):
        return _uep_fast_run.SwigPyIterator___next__(self)

    def previous(self):
        return _uep_fast_run.SwigPyIterator_previous(self)

    def advance(self, n):
        return _uep_fast_run.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _uep_fast_run.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _uep_fast_run.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _uep_fast_run.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _uep_fast_run.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _uep_fast_run.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _uep_fast_run.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _uep_fast_run.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class simulation_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, simulation_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, simulation_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Ks"] = _uep_fast_run.simulation_params_Ks_set
    __swig_getmethods__["Ks"] = _uep_fast_run.simulation_params_Ks_get
    if _newclass:
        Ks = _swig_property(_uep_fast_run.simulation_params_Ks_get, _uep_fast_run.simulation_params_Ks_set)
    __swig_setmethods__["RFs"] = _uep_fast_run.simulation_params_RFs_set
    __swig_getmethods__["RFs"] = _uep_fast_run.simulation_params_RFs_get
    if _newclass:
        RFs = _swig_property(_uep_fast_run.simulation_params_RFs_get, _uep_fast_run.simulation_params_RFs_set)
    __swig_setmethods__["EF"] = _uep_fast_run.simulation_params_EF_set
    __swig_getmethods__["EF"] = _uep_fast_run.simulation_params_EF_get
    if _newclass:
        EF = _swig_property(_uep_fast_run.simulation_params_EF_get, _uep_fast_run.simulation_params_EF_set)
    __swig_setmethods__["c"] = _uep_fast_run.simulation_params_c_set
    __swig_getmethods__["c"] = _uep_fast_run.simulation_params_c_get
    if _newclass:
        c = _swig_property(_uep_fast_run.simulation_params_c_get, _uep_fast_run.simulation_params_c_set)
    __swig_setmethods__["delta"] = _uep_fast_run.simulation_params_delta_set
    __swig_getmethods__["delta"] = _uep_fast_run.simulation_params_delta_get
    if _newclass:
        delta = _swig_property(_uep_fast_run.simulation_params_delta_get, _uep_fast_run.simulation_params_delta_set)
    __swig_setmethods__["L"] = _uep_fast_run.simulation_params_L_set
    __swig_getmethods__["L"] = _uep_fast_run.simulation_params_L_get
    if _newclass:
        L = _swig_property(_uep_fast_run.simulation_params_L_get, _uep_fast_run.simulation_params_L_set)
    __swig_setmethods__["nblocks"] = _uep_fast_run.simulation_params_nblocks_set
    __swig_getmethods__["nblocks"] = _uep_fast_run.simulation_params_nblocks_get
    if _newclass:
        nblocks = _swig_property(_uep_fast_run.simulation_params_nblocks_get, _uep_fast_run.simulation_params_nblocks_set)
    __swig_setmethods__["overhead"] = _uep_fast_run.simulation_params_overhead_set
    __swig_getmethods__["overhead"] = _uep_fast_run.simulation_params_overhead_get
    if _newclass:
        overhead = _swig_property(_uep_fast_run.simulation_params_overhead_get, _uep_fast_run.simulation_params_overhead_set)
    __swig_setmethods__["chan_pGB"] = _uep_fast_run.simulation_params_chan_pGB_set
    __swig_getmethods__["chan_pGB"] = _uep_fast_run.simulation_params_chan_pGB_get
    if _newclass:
        chan_pGB = _swig_property(_uep_fast_run.simulation_params_chan_pGB_get, _uep_fast_run.simulation_params_chan_pGB_set)
    __swig_setmethods__["chan_pBG"] = _uep_fast_run.simulation_params_chan_pBG_set
    __swig_getmethods__["chan_pBG"] = _uep_fast_run.simulation_params_chan_pBG_get
    if _newclass:
        chan_pBG = _swig_property(_uep_fast_run.simulation_params_chan_pBG_get, _uep_fast_run.simulation_params_chan_pBG_set)
    __swig_setmethods__["nCycles"] = _uep_fast_run.simulation_params_nCycles_set
    __swig_getmethods__["nCycles"] = _uep_fast_run.simulation_params_nCycles_get
    if _newclass:
        nCycles = _swig_property(_uep_fast_run.simulation_params_nCycles_get, _uep_fast_run.simulation_params_nCycles_set)

    def __getstate__(self):
      state = dict()
      state['Ks'] = [k for k in self.Ks]
      state['RFs'] = [rf for rf in self.RFs]
      state['EF'] = self.EF
      state['c'] = self.c
      state['delta'] = self.delta
      state['L'] = self.L
      state['nblocks'] = self.nblocks
      state['overhead'] = self.overhead
      state['chan_pGB'] = self.chan_pGB
      state['chan_pBG'] = self.chan_pBG
      state['nCycles'] = self.nCycles
      return state

    def __setstate__(self, state):
      self.__init__()
      self.Ks[:] = state['Ks']
      self.RFs[:] = state['RFs']
      self.EF = state['EF']
      self.c = state['c']
      self.delta = state['delta']
      self.L = state['L']
      self.nblocks = state['nblocks']
      self.overhead = state['overhead']
      self.chan_pGB = state['chan_pGB']
      self.chan_pBG = state['chan_pBG']
      self.nCycles = state.get('nCycles', 1)


    def __init__(self, *args):
        this = _uep_fast_run.new_simulation_params(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _uep_fast_run.delete_simulation_params
    __del__ = lambda self: None
simulation_params_swigregister = _uep_fast_run.simulation_params_swigregister
simulation_params_swigregister(simulation_params)

class simulation_results(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, simulation_results, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, simulation_results, name)
    __repr__ = _swig_repr
    __swig_setmethods__["avg_pers"] = _uep_fast_run.simulation_results_avg_pers_set
    __swig_getmethods__["avg_pers"] = _uep_fast_run.simulation_results_avg_pers_get
    if _newclass:
        avg_pers = _swig_property(_uep_fast_run.simulation_results_avg_pers_get, _uep_fast_run.simulation_results_avg_pers_set)
    __swig_setmethods__["rec_counts"] = _uep_fast_run.simulation_results_rec_counts_set
    __swig_getmethods__["rec_counts"] = _uep_fast_run.simulation_results_rec_counts_get
    if _newclass:
        rec_counts = _swig_property(_uep_fast_run.simulation_results_rec_counts_get, _uep_fast_run.simulation_results_rec_counts_set)
    __swig_setmethods__["dropped_count"] = _uep_fast_run.simulation_results_dropped_count_set
    __swig_getmethods__["dropped_count"] = _uep_fast_run.simulation_results_dropped_count_get
    if _newclass:
        dropped_count = _swig_property(_uep_fast_run.simulation_results_dropped_count_get, _uep_fast_run.simulation_results_dropped_count_set)
    __swig_setmethods__["avg_enc_time"] = _uep_fast_run.simulation_results_avg_enc_time_set
    __swig_getmethods__["avg_enc_time"] = _uep_fast_run.simulation_results_avg_enc_time_get
    if _newclass:
        avg_enc_time = _swig_property(_uep_fast_run.simulation_results_avg_enc_time_get, _uep_fast_run.simulation_results_avg_enc_time_set)

    def __getstate__(self):
      state = dict()
      state['avg_pers'] = [p for p in self.avg_pers]
      state['rec_counts'] = [c for c in self.rec_counts]
      state['dropped_count'] = self.dropped_count
      state['avg_enc_time'] = self.avg_enc_time
      return state

    def __setstate__(self, state):
      self.__init__()
      self.avg_pers[:] = state['avg_pers']
      self.rec_counts[:] = state['rec_counts']
      self.avg_enc_time = state['avg_enc_time']


    def __init__(self, *args):
        this = _uep_fast_run.new_simulation_results(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _uep_fast_run.delete_simulation_results
    __del__ = lambda self: None
simulation_results_swigregister = _uep_fast_run.simulation_results_swigregister
simulation_results_swigregister(simulation_results)


def run_uep(params, results):
    return _uep_fast_run.run_uep(params, results)
run_uep = _uep_fast_run.run_uep
class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _uep_fast_run.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _uep_fast_run.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _uep_fast_run.DoubleVector___bool__(self)

    def __len__(self):
        return _uep_fast_run.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _uep_fast_run.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _uep_fast_run.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _uep_fast_run.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _uep_fast_run.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _uep_fast_run.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _uep_fast_run.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _uep_fast_run.DoubleVector_pop(self)

    def append(self, x):
        return _uep_fast_run.DoubleVector_append(self, x)

    def empty(self):
        return _uep_fast_run.DoubleVector_empty(self)

    def size(self):
        return _uep_fast_run.DoubleVector_size(self)

    def swap(self, v):
        return _uep_fast_run.DoubleVector_swap(self, v)

    def begin(self):
        return _uep_fast_run.DoubleVector_begin(self)

    def end(self):
        return _uep_fast_run.DoubleVector_end(self)

    def rbegin(self):
        return _uep_fast_run.DoubleVector_rbegin(self)

    def rend(self):
        return _uep_fast_run.DoubleVector_rend(self)

    def clear(self):
        return _uep_fast_run.DoubleVector_clear(self)

    def get_allocator(self):
        return _uep_fast_run.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _uep_fast_run.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _uep_fast_run.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _uep_fast_run.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _uep_fast_run.DoubleVector_push_back(self, x)

    def front(self):
        return _uep_fast_run.DoubleVector_front(self)

    def back(self):
        return _uep_fast_run.DoubleVector_back(self)

    def assign(self, n, x):
        return _uep_fast_run.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _uep_fast_run.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _uep_fast_run.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _uep_fast_run.DoubleVector_reserve(self, n)

    def capacity(self):
        return _uep_fast_run.DoubleVector_capacity(self)
    __swig_destroy__ = _uep_fast_run.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _uep_fast_run.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class SizeTVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SizeTVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SizeTVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _uep_fast_run.SizeTVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _uep_fast_run.SizeTVector___nonzero__(self)

    def __bool__(self):
        return _uep_fast_run.SizeTVector___bool__(self)

    def __len__(self):
        return _uep_fast_run.SizeTVector___len__(self)

    def __getslice__(self, i, j):
        return _uep_fast_run.SizeTVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _uep_fast_run.SizeTVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _uep_fast_run.SizeTVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _uep_fast_run.SizeTVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _uep_fast_run.SizeTVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _uep_fast_run.SizeTVector___setitem__(self, *args)

    def pop(self):
        return _uep_fast_run.SizeTVector_pop(self)

    def append(self, x):
        return _uep_fast_run.SizeTVector_append(self, x)

    def empty(self):
        return _uep_fast_run.SizeTVector_empty(self)

    def size(self):
        return _uep_fast_run.SizeTVector_size(self)

    def swap(self, v):
        return _uep_fast_run.SizeTVector_swap(self, v)

    def begin(self):
        return _uep_fast_run.SizeTVector_begin(self)

    def end(self):
        return _uep_fast_run.SizeTVector_end(self)

    def rbegin(self):
        return _uep_fast_run.SizeTVector_rbegin(self)

    def rend(self):
        return _uep_fast_run.SizeTVector_rend(self)

    def clear(self):
        return _uep_fast_run.SizeTVector_clear(self)

    def get_allocator(self):
        return _uep_fast_run.SizeTVector_get_allocator(self)

    def pop_back(self):
        return _uep_fast_run.SizeTVector_pop_back(self)

    def erase(self, *args):
        return _uep_fast_run.SizeTVector_erase(self, *args)

    def __init__(self, *args):
        this = _uep_fast_run.new_SizeTVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _uep_fast_run.SizeTVector_push_back(self, x)

    def front(self):
        return _uep_fast_run.SizeTVector_front(self)

    def back(self):
        return _uep_fast_run.SizeTVector_back(self)

    def assign(self, n, x):
        return _uep_fast_run.SizeTVector_assign(self, n, x)

    def resize(self, *args):
        return _uep_fast_run.SizeTVector_resize(self, *args)

    def insert(self, *args):
        return _uep_fast_run.SizeTVector_insert(self, *args)

    def reserve(self, n):
        return _uep_fast_run.SizeTVector_reserve(self, n)

    def capacity(self):
        return _uep_fast_run.SizeTVector_capacity(self)
    __swig_destroy__ = _uep_fast_run.delete_SizeTVector
    __del__ = lambda self: None
SizeTVector_swigregister = _uep_fast_run.SizeTVector_swigregister
SizeTVector_swigregister(SizeTVector)

# This file is compatible with both classic and new-style classes.


